#!/usr/bin/python3
#
# Copyright (C) 2013-2015   Ian Firns   <firnsy@kororaproject.org>
#                           Chris Smart <csmart@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import dnf
import getpass
import json
import logging
import optparse
import os
import signal
import sys

logger = logging.getLogger('canvas')

# TODO: REMOVE
sys.path.append('./lib')

import canvas.config
import canvas.cli.commands
import canvas.cli.commands.config
import canvas.cli.commands.machine
import canvas.cli.commands.package
import canvas.cli.commands.repo
import canvas.cli.commands.template

PROG_VERSION='1.0'
PROG_NAME='Canvas';

#CANVAS_HOST='https://canvas.kororaproject.org'
CANVAS_HOST='http://localhost:3000'

class ArgumentParserError(Exception): pass

class ErrorRaisingArgumentParser(argparse.ArgumentParser):
  def error(self, message):
    print(message)
    raise ArgumentParserError(message)


def buildCommandLineParser(config):
  parser = ErrorRaisingArgumentParser(prog='cnvs', add_help=False)
  subparsers = parser.add_subparsers(dest='command')

  # general arguments
  general_parser = argparse.ArgumentParser(add_help=False)
  general_parser.add_argument('-h', '--help', '-?', action='store_true', dest='help')
  general_parser.add_argument('-U', '--user', type=str, dest='username', default=config.get('user', 'name'))
  general_parser.add_argument('-H', '--host', type=str, dest='host', default=config.get('core', 'host', CANVAS_HOST))
  general_parser.add_argument('-v', '--verbose', action='store_true', dest='verbose')
  general_parser.add_argument('-V', '--version', action='version', version='{0} - {1}'.format(PROG_NAME, PROG_VERSION))

  #
  # CONFIG COMMANDS
  #

  config_parser = subparsers.add_parser('config', add_help=False, parents=[general_parser])
  config_parser.add_argument('--unset', action='store_true', dest='unset')
  config_parser.add_argument('name')
  config_parser.add_argument('value', nargs='?')

  #
  # TEMPLATE COMMANDS
  #

  template_parser = subparsers.add_parser('template', add_help=False, parents=[general_parser])
  subparsers_template = template_parser.add_subparsers(dest='action')

  template_parser.add_argument('-n', '--dry-run', action="store_true", dest='dry_run')

  # template add arguments
  template_add_parser = subparsers_template.add_parser('add', add_help=False, parents=[general_parser])
  template_add_parser.add_argument('template', type=str)
  template_add_parser.add_argument('--title', type=str)
  template_add_parser.add_argument('--description', type=str)
  template_add_parser.add_argument('--includes', type=str)
  template_add_parser.add_argument('--public', type=str, choices=['0', '1', 'false', 'true'])

  # template update arguments
  template_update_parser = subparsers_template.add_parser('update', add_help=False, parents=[general_parser])
  template_update_parser.add_argument('template', type=str)
  template_update_parser.add_argument('--title', type=str)
  template_update_parser.add_argument('--description', type=str)
  template_update_parser.add_argument('--includes', type=str)
  template_update_parser.add_argument('--name', type=str)
  template_update_parser.add_argument('--public', type=str, choices=['0', '1', 'false', 'true'])

  # template list arguments
  template_list_parser = subparsers_template.add_parser('list', add_help=False, parents=[general_parser])

  # template remove arguments
  template_remove_parser = subparsers_template.add_parser('rm', add_help=False, parents=[general_parser])
  template_remove_parser.add_argument('template', type=str)

  # template pull arguments
  template_pull_parser = subparsers_template.add_parser('pull', add_help=False, parents=[general_parser])
  template_pull_parser.add_argument('template', type=str)
  template_pull_parser.add_argument('--clean', action='store_true', dest='pull_clean')

  # template push arguments
  template_push_parser = subparsers_template.add_parser('push', add_help=False, parents=[general_parser])
  template_push_parser.add_argument('template', type=str)

  # template diff arguments
  template_diff_parser = subparsers_template.add_parser('delete', add_help=False, parents=[general_parser])
  template_diff_parser.add_argument('template', type=str)

  # template copy arguments
  template_copy_parser = subparsers_template.add_parser('delete', add_help=False, parents=[general_parser])
  template_copy_parser.add_argument('template_from', type=str)
  template_copy_parser.add_argument('template_to', type=str, nargs='?')

  #
  # PACKAGE COMMANDS
  #

  package_parser = subparsers.add_parser('package', add_help=False, parents=[general_parser])
  subparsers_package = package_parser.add_subparsers(dest='action', title='Package Commands')

  # package add arguments
  package_add_parser = subparsers_package.add_parser('add', add_help=False, parents=[general_parser])
  package_add_parser.add_argument('template', type=str)
  package_add_parser.add_argument('package', type=str, nargs='+')

  # package list arguments
  package_list_parser = subparsers_package.add_parser('list', add_help=False, parents=[general_parser])
  package_list_parser.add_argument('template', type=str)

  # package remove arguments
  package_remove_parser = subparsers_package.add_parser('rm', add_help=False, parents=[general_parser])
  package_remove_parser.add_argument('template', type=str)
  package_remove_parser.add_argument('package', type=str, nargs='+')

  #
  # REPO COMMANDS
  #

  repo_parser = subparsers.add_parser('repo', add_help=False, parents=[general_parser])
  subparsers_repo = repo_parser.add_subparsers(dest='action', title='repo Commands')

  # repo add arguments
  repo_add_parser = subparsers_repo.add_parser('add', add_help=False, parents=[general_parser])
  repo_add_parser.add_argument('repo', type=str)

  # repo update arguments
  repo_update_parser = subparsers_repo.add_parser('update', add_help=False, parents=[general_parser])
  repo_update_parser.add_argument('repo', type=str)

  # repo list arguments
  repo_list_parser = subparsers_package.add_parser('list', add_help=False, parents=[general_parser])
  repo_list_parser.add_argument('template', type=str)

  # repo remove arguments
  repo_remove_parser = subparsers_repo.add_parser('rm', add_help=False, parents=[general_parser])
  repo_remove_parser.add_argument('repo', type=str)

  #
  # MACHINE COMMANDS
  #

  #
  # machine general arguments
  machine_parser = subparsers.add_parser('machine', add_help=False, parents=[general_parser], usage='')
  subparsers_machine = machine_parser.add_subparsers(dest='action', title='Machine Commands')

  # machine add arguments
  machine_add_parser = subparsers_machine.add_parser('add', add_help=False, parents=[general_parser])
  machine_add_parser.add_argument('machine', type=str)
  machine_add_parser.add_argument('--description', type=str)
  machine_add_parser.add_argument('--location', type=str)
  machine_add_parser.add_argument('--template', type=str)

  # machine update arguments
  machine_update_parser = subparsers_machine.add_parser('update', add_help=False, parents=[general_parser])
  machine_update_parser.add_argument('machine', type=str)
  machine_update_parser.add_argument('--description', type=str)
  machine_update_parser.add_argument('--location', type=str)
  machine_update_parser.add_argument('--template', type=str)

  # machine remove arguments
  machine_remove_parser = subparsers_machine.add_parser('rm', add_help=False, parents=[general_parser])
  machine_remove_parser.add_argument('machine', type=str)

  # machine diff arguments
  machine_diff_parser = subparsers_machine.add_parser('diff', add_help=False, parents=[general_parser])
  machine_diff_parser.add_argument('machine', type=str)

  # machine sync arguments
  machine_sync_parser = subparsers_machine.add_parser('sync', add_help=False, parents=[general_parser])
  machine_sync_parser.add_argument('machine', type=str)
  machine_sync_parser_group = machine_sync_parser.add_mutually_exclusive_group()
  machine_sync_parser_group.add_argument('pull', type=str, nargs='?')
  machine_sync_parser_group.add_argument('push', type=str, nargs='?')

  # machine command arguments
  machine_command_parser = subparsers_machine.add_parser('cmd', add_help=False, parents=[general_parser])
  machine_command_parser.add_argument('machine', type=str)
  machine_command_parser.add_argument('cmd', type=str)
  machine_command_parser.add_argument('args', type=str, nargs='*')

  return parser


def signal_handler(signal, frame):
  print()
  sys.exit(1)


if __name__ == '__main__':
  # trap ctrl+c, it's polish
  signal.signal(signal.SIGINT, signal_handler)

  # read config file
  config = canvas.config.Config()

  parser = buildCommandLineParser(config)

  # parse known commands printing general usage on any error
  try:
    args, args_extra = parser.parse_known_args()

  except:
    # TODO: determine best help instead of general
    args.command = sys.args[1]
    args.action  = sys.args[2]
    args.help = True

  cli = None

  # processCommandLine
  if args.command == 'config':
    cli = canvas.cli.commands.config.ConfigCommand()

  elif args.command == 'template':
    cli = canvas.cli.commands.template.TemplateCommand()

  elif args.command == 'package':
    cli = canvas.cli.commands.package.PackageCommand()

  elif args.command == 'repo':
    cli = canvas.cli.commands.repo.RepoCommand()

  elif args.command == 'machine':
    cli = canvas.cli.commands.machine.MachineCommand()

  # print general usage if no command found
  if cli is None:
    canvas.cli.commands.general_usage()
    sys.exit(1)

  if not cli.configure(config, args, args_extra):
    cli.help()
    sys.exit(1)

  sys.exit(cli.run())
